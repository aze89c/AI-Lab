3. PROLOG 
 
 
Symbols 
Prolog expressions are comprised of the following truth-functional symbols, which have the same 
interpretation as in the predicate calculus. 
English Predicate Calculus PROLOG 
And ^ , 
Or V ; 
If --> :- 
Not ~ Not 
 
 
Variables and Names 
 
Variables begin with an uppercase letter. Predicate names, function names, and the names for objects must 
begin with a lowercase letter. Rules for forming names are the same as for the predicate calculus. 
mother_of 
male 
female 
greater_than 
Socrates 
 
Facts 
 
A fact is a predicate expression that makes a declarative statement about the problem domain. Whenever a 
variable occurs in a Prolog expression, it is assumed to be universally quantified. Note that all Prolog 
sentences must end with a period. 
likes(john, susie).                   /* John likes Susie */ 
likes(X, susie).                      /* Everyone likes Susie */ 
likes(john, Y).                       /* John likes everybody */ 
likes(john, Y), likes(Y, john).       /* John likes everybody and everybody likes John */ 
likes(john, susie); likes(john,mary). /* John likes Susie or John likes Mary */ 
not(likes(john,pizza)).               /* John does not like pizza */ 
likes(john,susie) :- likes(john,mary)./* John likes Susie if John likes Mary. 
 
Rules 
 
A rule is a predicate expression that uses logical implication (:-) to describe a relationship among facts. 
Thus a Prolog rule takes the form 
left_hand_side :- right_hand_side . 
This sentence is interpreted as: left_hand_side if right_hand_side. The left_hand_side is restricted to 
a single, positive, literal, which means it must consist of a positive atomic expression. It cannot be negated 
and it cannot contain logical connectives. 
 
AI-LAB (PC 553 CS) 
 
This notation is known as a Horn clause. In Horn clause logic, the left hand side of the clause is the 
conclusion, and must be a single positive literal. The right hand side contains the premises. The Horn clause 
calculus is equivalent to the first-order predicate calculus. 
Examples of valid rules: 
friends(X,Y) :- likes(X,Y),likes(Y,X).            /* X and Y are friends if they like each other */ 
hates(X,Y) :- not(likes(X,Y)).                    /* X hates Y if X does not like Y. */ 
enemies(X,Y) :- not(likes(X,Y)),not(likes(Y,X)).  /* X and Y are enemies if they don't like each other */ 
Examples of invalid rules: 
left_of(X,Y) :- right_of(Y,X)                     /* Missing a period */ 
likes(X,Y),likes(Y,X) :- friends(X,Y).            /* LHS is not a single literal */ 
not(likes(X,Y)) :- hates(X,Y).                    /* LHS cannot be negated */ 
 
Queries 
 
The Prolog interpreter responds to queries about the facts and rules represented in its database. The database 
is assumed to represent what is true about a particular problem domain. In making a query you are asking 
Prolog whether it can prove that your query is true. If so, it answers "yes" and displays any variable 
bindings that it made in coming up with the answer. If it fails to prove the query true, it answers "No". 
Whenever you run the Prolog interpreter, it will prompt you with ?-. For example, suppose our database 
consists of the following facts about a fictitious family. 
father_of(joe,paul). 
father_of(joe,mary). 
mother_of(jane,paul). 
mother_of(jane,mary). 
male(paul). 
male(joe). 
female(mary). 
female(jane).